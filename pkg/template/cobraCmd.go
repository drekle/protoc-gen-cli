package template

import (
	protochelpers "github.com/drekle/protoc-gen-client/pkg/option"
)

type CobraCommandInput struct {
	RepoURL   string
	Service   *protochelpers.Service
	GoPBPath  string
	Procedure *protochelpers.Procedure
}

const CobraCommandTemplate = `// Generated by protoc-gen-client
{{$root := .}}
package {{ .Service.Name | toLower }}

import (
	"context"
	"fmt"
	"os"
	"github.com/spf13/cobra"

	
	{{ .Service.Name | toLower }}pb "{{ .RepoURL }}/{{ .GoPBPath }}"
)

const {{ .Procedure.Name }}Info = ""

const {{ .Procedure.Name }}Example = ""

var (
	{{- range .Procedure.InputMessage.Field }}
	{{ $root.Procedure.Name | privateName }}{{ .Name | publicName }} {{ .Type | goType }} 
	{{- end }}
)

var {{ .Procedure.Name }} = &cobra.Command{
	Use:     "",
	Short:   "",
	Long:    {{ .Procedure.Name }}Info,
	Example: {{ .Procedure.Name }}Example,
	Run: func(_ *cobra.Command, _ []string) {

			ctx := context.Background()
			conn, err := grpc.Dial("localhost:50051", grpc.WithInsecure())
			if err != nil {
				log.Fatalf("Failed to dial localhost:50051: %v", err)
			}
			defer conn.Close()
		
			c := {{ .Service.Name | toLower }}pb.New{{ .Service.Name | publicName }}Client(conn)

			resp, err := c.{{ .Procedure.Name }}(metaContext, &{{ .Service.Name | toLower }}pb.{{ removeAll .Procedure.InputType (printf ".%s." (deref .Service.Proto.Package)) }}{
				{{- range .Procedure.InputMessage.Field }}
					{{ .Name | publicName }}: {{ $root.Procedure.Name | privateName }}{{ .Name }},
				{{- end }}
			})
			if err != nil {
					fmt.Fprintf(os.Stderr, "failed {{ .Procedure.Name }} request: %v", err)
			}
			fmt.Fprintf(os.Stdout, resp)
	},
}

func init() {
	//TODO: Add the command to root with fields
	{{- range .Procedure.InputMessage.Field }}
	{{ $root.Procedure.Name }}.Flags().StringVar(&{{ $root.Procedure.Name | privateName }}{{ .Name | publicName }}, "{{ .Name | toLower }}", "", "")
	{{- end }}
}
`
